/****************************************************************************
* COSC2138/CPT 220 - Programming Principles 2A
* Study Period 2  2014 Assignment #1 - Different Applications
* Full Name        : Greg Kappatos
* Student Number   : 
* Start up code provided by the CTeach Team
****************************************************************************/

-----------------------------------------------------------------------------
If selected, do you grant permission for your assignment to be released as an
anonymous student sample solution?
-----------------------------------------------------------------------------

Yes/No - N

-----------------------------------------------------------------------------
Documentation of my implemented requirements:
-----------------------------------------------------------------------------

Requirement  1 - Main menu()                                : Yes/No
Requirement  2 - Fibonacci Numbers                          : Yes/No
Requirement  3 - Translating Phone numbers                  : Yes/No
Requirement  4 - First and Last Strings                     : Yes/No
Requirement  5 - Word Stopping                              : Yes/No
Requirement  6 - Rook and the Bishop                        : Yes/No
Requirement  7 - Session Summary                            : Yes/No
Requirement  8 - Exit                                       : Yes/No
Requirement  9 - Return to Menu Functionality               : Yes/No
Requirement 10 - Functional Abstraction                     : Yes/No
Requirement 10 - Buffer handling                            : Yes/No
Requirement 11 - Input validation                           : Yes/No
Requirement 12 - Coding conventions                         : Yes/No

Requirements 1 - 8:
Look in assign1.c

Requirement  9 - Return to Menu Functionality:
This is implemented by simply ignoring a returned false value when
getting an integer or string from stdin.

Requirement 10 - Functional Abstraction:
I think I have functional abstraction. All my methods have been broken up
into smaller methods and nothing is really being called more than once.

Requirement 10 - Buffer handling:
Have a look at getIntegerFromStdIn and getStringFromStdIn methods.
If a string is too long, it just gets consumed.

Requirement 11 - Input validation:
This occurs in every method that gets input from the user.
(which are in requirements 1-8).

Requirement 12 - Coding conventions:
I hope I have followed proper coding conventions. I do my best to make it
readable.


-----------------------------------------------------------------------------
Known bugs:
-----------------------------------------------------------------------------

None

-----------------------------------------------------------------------------
Assumptions:
-----------------------------------------------------------------------------

None

-----------------------------------------------------------------------------
Any other notes for the marker:
-----------------------------------------------------------------------------

I have used dynamic memory because I wanted to learn it. In regards to the 
"word Series" requirement, the limit is almost unlimited in the sense that it 
should keep adding words until the user runs out of memory.

-------------------------------------------------------------------------------------
IDE used - comments on its use when transferred to the Linux core teaching 
machines.
--------------------------------------------------------------------------------------

OS: Ubuntu 14.04
IDE: Standard one in the terminal, Nano, and Eclipse.
